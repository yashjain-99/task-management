version: "3.9"

services:
  db:
    image: postgres:13-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
    ports:
      - "${API_PORT}:${API_PORT}"
    volumes:
      - ./api/task_manager:/task_manager
    environment:
      PORT: ${API_PORT}
      DB_HOST: db
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      POSTGRES_DATABASE_URL: ${API_POSTGRES_DATABASE_URL}
      WEB_PORT: ${WEB_PORT}
      WEB_DOMAIN: ${WEB_DOMAIN}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        - VITE_API_PORT=${API_PORT}
        - VITE_API_DOMAIN=${API_DOMAIN}
    container_name: web
    ports:
      - "${WEB_PORT}:${WEB_PORT}"
    environment:
      - WEB_PORT=${WEB_PORT}
    depends_on:
      api:
        condition: service_started
    networks:
      - app_network

volumes:
  dev-db-data:

networks:
  app_network:
    driver: bridge
